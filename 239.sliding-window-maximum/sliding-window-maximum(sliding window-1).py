class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        n = len(nums)
        # 注意 Python 默认的优先队列是小根堆
        # 初始化一个堆q，它包含前k个元素的负值和对应的索引。
        # 由于我们使用了小顶堆，所以取负值是为了使堆顶的元素实际上是原数组中的最大值。
        q = [(-nums[i], i) for i in range(k)]
        # 将列表q转换为堆
        heapq.heapify(q)
        # 将第一个滑动窗口的最大值（即堆顶元素的负值的相反数）添加到结果列表res中。
        res = [-q[0][0]]

        for i in range(k, n):
            # 现将新的元素，按照堆的元素格式加入堆中
            heapq.heappush(q, (-nums[i], i))
            # 当堆顶元素的索引小于或等于i - k时，说明该元素已经不在当前的滑动窗口内了，因此需要从堆中移除。
            while q[0][1] <= i - k:
                # 从堆中移除。
                heapq.heappop(q)
            # 将当前滑动窗口的最大值（即堆顶元素的负值的相反数）添加到结果列表res中。
            res.append(-q[0][0])
        return res


"""
Solution:滑动窗口 优先队列 最小堆（Python 默认的优先队列是小根堆）
初始的时候将前 k 个元素加入优先队列的二叉堆中。存入优先队列的是数组值与索引构成的元组。优先队列将数组值作为优先级。
然后滑动窗口从第 k 个元素开始遍历，将当前数组值和索引的元组插入到二叉堆中。
当二叉堆堆顶元素的索引已经不在滑动窗口的范围中时，即 q[0][1] <= i - k 时，不断删除堆顶元素，直到最大值元素的索引在滑动窗口的范围中。
将最大值加入到答案数组中，继续向右滑动。
滑动结束时，输出答案数组。

"""
