class Solution:
    def findDiagonalOrder(self, mat: List[List[int]]) -> List[int]:
        rows, cols = len(mat), len(mat[0])
        x, y = 0, 0
        ans = []

        for i in range(rows * cols):
            ans.append(mat[x][y])

            if (x + y) % 2 == 0:
                # 最后一列
                if y == cols - 1:
                    x += 1
                # 第一行
                elif x == 0:
                    y += 1
                # 右上方向
                else:
                    x -= 1
                    y += 1
            else:
                # 最后一行
                if x == rows - 1:
                    y += 1
                # 第一列
                elif y == 0:
                    x += 1
                # 左下方向
                else:
                    x += 1
                    y -= 1
        return ans


"""
Solution：找规律
关键是「找规律」和「考虑边界问题」。
一共m+n-1条对角线。
找规律：
    当「行号 + 列号」为偶数时，遍历方向为从左下到右上。可以记为右上方向(−1,+1)，即行号减 1，列号加 1。
    当「行号 + 列号」为奇数时，遍历方向为从右上到左下。可以记为左下方向(+1,−1)，即行号加 1，列号减 1。
边界情况：
    向右上方向移动时：
        如果在最后一列，此对角线的第一个元素则向下方移动，即 x += 1。
        如果在第一行，此对角线的第一个元素则向右方移动，即 y += 1。
        其余情况向右上方向移动，即 x -= 1、y += 1。
    向左下方向移动时：
        如果在最后一行，此对角线的第一个元素则向右方移动，即 y += 1。
        如果在第一列，此对角线的第一个元素则向下方移动，即 x += 1。
        其余情况向左下方向移动，即 x += 1、y -= 1。
"""
